// Code generated by sqlc. DO NOT EDIT.
// source: account.sql

package db

import (
	"context"
)

const addAccountBalance = `-- name: AddAccountBalance :one
UPDATE cuenta 
SET tope = tope + $1
WHERE id = $2
RETURNING id, propietario, tope, divisa, created_at
`

type AddAccountBalanceParams struct {
	Monto int64 `json:"monto"`
	ID    int64 `json:"id"`
}

func (q *Queries) AddAccountBalance(ctx context.Context, arg AddAccountBalanceParams) (Cuentum, error) {
	row := q.db.QueryRowContext(ctx, addAccountBalance, arg.Monto, arg.ID)
	var i Cuentum
	err := row.Scan(
		&i.ID,
		&i.Propietario,
		&i.Tope,
		&i.Divisa,
		&i.CreatedAt,
	)
	return i, err
}

const createAccount = `-- name: CreateAccount :one
INSERT INTO cuenta (
  propietario,
  tope,
  divisa
) VALUES (
  $1, $2, $3
) RETURNING id, propietario, tope, divisa, created_at
`

type CreateAccountParams struct {
	Propietario string `json:"propietario"`
	Tope        int64  `json:"tope"`
	Divisa      string `json:"divisa"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Cuentum, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Propietario, arg.Tope, arg.Divisa)
	var i Cuentum
	err := row.Scan(
		&i.ID,
		&i.Propietario,
		&i.Tope,
		&i.Divisa,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM cuenta WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, propietario, tope, divisa, created_at FROM cuenta
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int64) (Cuentum, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Cuentum
	err := row.Scan(
		&i.ID,
		&i.Propietario,
		&i.Tope,
		&i.Divisa,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountForUpdate = `-- name: GetAccountForUpdate :one
SELECT id, propietario, tope, divisa, created_at FROM cuenta
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetAccountForUpdate(ctx context.Context, id int64) (Cuentum, error) {
	row := q.db.QueryRowContext(ctx, getAccountForUpdate, id)
	var i Cuentum
	err := row.Scan(
		&i.ID,
		&i.Propietario,
		&i.Tope,
		&i.Divisa,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, propietario, tope, divisa, created_at FROM cuenta
WHERE propietario = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListAccountsParams struct {
	Propietario string `json:"propietario"`
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Cuentum, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Propietario, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cuentum{}
	for rows.Next() {
		var i Cuentum
		if err := rows.Scan(
			&i.ID,
			&i.Propietario,
			&i.Tope,
			&i.Divisa,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE cuenta SET tope = $2
WHERE id = $1
RETURNING id, propietario, tope, divisa, created_at
`

type UpdateAccountParams struct {
	ID   int64 `json:"id"`
	Tope int64 `json:"tope"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Cuentum, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.ID, arg.Tope)
	var i Cuentum
	err := row.Scan(
		&i.ID,
		&i.Propietario,
		&i.Tope,
		&i.Divisa,
		&i.CreatedAt,
	)
	return i, err
}
